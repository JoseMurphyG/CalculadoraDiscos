<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora de Gráficas 2D y 3D</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/10.6.4/math.min.js"></script>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: Arial, sans-serif;
            background-color: #f3f4f6;
            height: 100vh;
            margin: 0;
        }

        .calculator {
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
            padding: 20px;
            width: 100%;
            max-width: 600px;
            text-align: center;
        }

        .calculator h2 {
            color: #333333;
            font-size: 24px;
            margin-bottom: 20px;
        }

        .input-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 20px;
        }

        .input-group label {
            color: #555555;
            font-weight: bold;
            font-size: 14px;
        }

        .input-group input {
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #dddddd;
            font-size: 14px;
        }

        .button-group {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
        }

        .button-group button {
            padding: 10px 20px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            font-weight: bold;
            color: #ffffff;
            font-size: 14px;
            transition: background-color 0.3s;
        }

        .button-group #calcularBtn {
            background-color: #4CAF50;
        }

        .button-group #calcularBtn:hover {
            background-color: #45a049;
        }

        .button-group #limpiarBtn {
            background-color: #f44336;
        }

        .button-group #limpiarBtn:hover {
            background-color: #e53935;
        }

        #resultado {
            font-weight: bold;
            color: #333333;
            margin-bottom: 20px;
        }

        #grafico2D {
            max-width: 100%;
            margin-bottom: 20px;
            border: 1px solid #dddddd;
            border-radius: 5px;
        }

        #contenedor3D {
            width: 100%;
            height: 400px;
            border: 1px solid #dddddd;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>
    <div class="calculator">
        <h2>Calculadora de Gráficas 2D y 3D</h2>
        <div class="input-group">
            <label>Función:</label>
            <input type="text" id="funcion" placeholder="Ingrese la función (ej. sqrt(x))">
            <label>Límite inferior (a):</label>
            <input type="number" id="a" value="0" placeholder="Límite inferior">
            <label>Límite superior (b):</label>
            <input type="number" id="b" value="4" placeholder="Límite superior">
        </div>
        <div class="button-group">
            <button id="calcularBtn">Calcular</button>
            <button id="limpiarBtn">Limpiar</button>
        </div>
        <div id="resultado">Resultado: </div>

        <!-- Contenedor para la gráfica 2D -->
        <h3>Gráfica 2D</h3>
        <canvas id="grafico2D"></canvas>

        <!-- Contenedor para la gráfica 3D -->
        <h3>Gráfica 3D</h3>
        <div id="contenedor3D"></div>
    </div>

    <script>
        let chart;
        let renderer3D;

        document.getElementById("calcularBtn").addEventListener("click", function() {
            const funcion = document.getElementById("funcion").value;
            const a = parseFloat(document.getElementById("a").value);
            const b = parseFloat(document.getElementById("b").value);

            try {
                const resultado = calcularVolumen(funcion, a, b, 100);
                document.getElementById("resultado").innerText = "Resultado: " + resultado;

                mostrarGrafica2D(funcion, a, b);
                mostrarGrafica3D(funcion, a, b);
            } catch (error) {
                document.getElementById("resultado").innerText = "Error en el cálculo: " + error.message;
            }
        });

        document.getElementById("limpiarBtn").addEventListener("click", function() {
            document.getElementById("funcion").value = "";
            document.getElementById("a").value = "0";
            document.getElementById("b").value = "1";
            document.getElementById("resultado").innerText = "Resultado: ";
            limpiarGraficas();
        });

        function calcularVolumen(funcion, a, b, numIntervalos) {
            const dx = (b - a) / numIntervalos;
            let suma = 0;
            for (let i = 0; i < numIntervalos; i++) {
                const x = a + i * dx;
                const fX = evaluarFuncion(funcion, x);
                suma += Math.PI * fX * fX * dx;
            }
            return suma;
        }

        function evaluarFuncion(funcion, x) {
            return math.evaluate(funcion.replace(/x/g, `(${x})`));
        }

        function mostrarGrafica2D(funcion, a, b) {
            const ctx = document.getElementById("grafico2D").getContext("2d");
            limpiarGraficas();

            const data = {
                labels: [],
                datasets: [{
                    label: 'f(x)',
                    data: [],
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 2,
                    fill: false,
                }]
            };

            const numPuntos = 100;
            const dx = (b - a) / numPuntos;

            for (let i = 0; i <= numPuntos; i++) {
                const x = a + i * dx;
                const fX = evaluarFuncion(funcion, x);
                data.labels.push(x.toFixed(2));
                data.datasets[0].data.push(fX);
            }

            if (chart) chart.destroy();
            chart = new Chart(ctx, {
                type: 'line',
                data: data,
                options: {
                    scales: {
                        x: { title: { display: true, text: 'x' }},
                        y: { title: { display: true, text: 'f(x)' }}
                    }
                }
            });
        }

        function limpiarGraficas() {
            if (chart) {
                chart.destroy();
                chart = null;
            }
            if (renderer3D) {
                renderer3D.dispose();
                renderer3D.domElement.remove();
                renderer3D = null;
            }
        }

        function mostrarGrafica3D(funcion, a, b) {
            const contenedor3D = document.getElementById("contenedor3D");

            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, contenedor3D.clientWidth / contenedor3D.clientHeight, 0.1, 1000);
            renderer3D = new THREE.WebGLRenderer();
            renderer3D.setSize(contenedor3D.clientWidth, contenedor3D.clientHeight);
            contenedor3D.appendChild(renderer3D.domElement);

            const material = new THREE.MeshBasicMaterial({ color: 0x0077ff, wireframe: true });

            const points = [];
            const numPoints = 50;
            const dx = (b - a) / numPoints;

            for (let i = 0; i <= numPoints; i++) {
                const x = a + i * dx;
                const y = evaluarFuncion(funcion, x);
                points.push(new THREE.Vector2(y, x));
            }

            const geometry = new THREE.LatheGeometry(points, 30);
            const lathe = new THREE.Mesh(geometry, material);
            scene.add(lathe);

            camera.position.z = 10;

            function animate() {
                requestAnimationFrame(animate);
                lathe.rotation.y += 0.01;
                renderer3D.render(scene, camera);
            }
            animate();
        }
    </script>
</body>
</html>
